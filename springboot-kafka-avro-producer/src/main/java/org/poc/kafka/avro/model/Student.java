/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.poc.kafka.avro.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5701064612895619577L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"org.poc.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"rollNumber\",\"type\":\"int\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"className\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":{\"type\":\"record\",\"name\":\"Contact\",\"fields\":[{\"name\":\"emailId\",\"type\":\"string\"},{\"name\":\"mobile\",\"type\":\"string\"}]}},{\"name\":\"scores\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Score\",\"fields\":[{\"name\":\"subject\",\"type\":\"string\"},{\"name\":\"marks\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public int rollNumber;
  @Deprecated public java.lang.CharSequence firstName;
  @Deprecated public java.lang.CharSequence lastName;
  @Deprecated public java.lang.CharSequence className;
  @Deprecated public org.poc.kafka.avro.model.Contact contact;
  @Deprecated public java.util.List<org.poc.kafka.avro.model.Score> scores;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Student() {}

  /**
   * All-args constructor.
   */
  public Student(java.lang.CharSequence id, java.lang.Integer rollNumber, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence className, org.poc.kafka.avro.model.Contact contact, java.util.List<org.poc.kafka.avro.model.Score> scores) {
    this.id = id;
    this.rollNumber = rollNumber;
    this.firstName = firstName;
    this.lastName = lastName;
    this.className = className;
    this.contact = contact;
    this.scores = scores;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return rollNumber;
    case 2: return firstName;
    case 3: return lastName;
    case 4: return className;
    case 5: return contact;
    case 6: return scores;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: rollNumber = (java.lang.Integer)value$; break;
    case 2: firstName = (java.lang.CharSequence)value$; break;
    case 3: lastName = (java.lang.CharSequence)value$; break;
    case 4: className = (java.lang.CharSequence)value$; break;
    case 5: contact = (org.poc.kafka.avro.model.Contact)value$; break;
    case 6: scores = (java.util.List<org.poc.kafka.avro.model.Score>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'rollNumber' field.
   */
  public java.lang.Integer getRollNumber() {
    return rollNumber;
  }

  /**
   * Sets the value of the 'rollNumber' field.
   * @param value the value to set.
   */
  public void setRollNumber(java.lang.Integer value) {
    this.rollNumber = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'className' field.
   */
  public java.lang.CharSequence getClassName() {
    return className;
  }

  /**
   * Sets the value of the 'className' field.
   * @param value the value to set.
   */
  public void setClassName(java.lang.CharSequence value) {
    this.className = value;
  }

  /**
   * Gets the value of the 'contact' field.
   */
  public org.poc.kafka.avro.model.Contact getContact() {
    return contact;
  }

  /**
   * Sets the value of the 'contact' field.
   * @param value the value to set.
   */
  public void setContact(org.poc.kafka.avro.model.Contact value) {
    this.contact = value;
  }

  /**
   * Gets the value of the 'scores' field.
   */
  public java.util.List<org.poc.kafka.avro.model.Score> getScores() {
    return scores;
  }

  /**
   * Sets the value of the 'scores' field.
   * @param value the value to set.
   */
  public void setScores(java.util.List<org.poc.kafka.avro.model.Score> value) {
    this.scores = value;
  }

  /**
   * Creates a new Student RecordBuilder.
   * @return A new Student RecordBuilder
   */
  public static org.poc.kafka.avro.model.Student.Builder newBuilder() {
    return new org.poc.kafka.avro.model.Student.Builder();
  }
  
  /**
   * Creates a new Student RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Student RecordBuilder
   */
  public static org.poc.kafka.avro.model.Student.Builder newBuilder(org.poc.kafka.avro.model.Student.Builder other) {
    return new org.poc.kafka.avro.model.Student.Builder(other);
  }
  
  /**
   * Creates a new Student RecordBuilder by copying an existing Student instance.
   * @param other The existing instance to copy.
   * @return A new Student RecordBuilder
   */
  public static org.poc.kafka.avro.model.Student.Builder newBuilder(org.poc.kafka.avro.model.Student other) {
    return new org.poc.kafka.avro.model.Student.Builder(other);
  }
  
  /**
   * RecordBuilder for Student instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private java.lang.CharSequence id;
    private int rollNumber;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private java.lang.CharSequence className;
    private org.poc.kafka.avro.model.Contact contact;
    private org.poc.kafka.avro.model.Contact.Builder contactBuilder;
    private java.util.List<org.poc.kafka.avro.model.Score> scores;

    /** Creates a new Builder */
    private Builder() {
      super(org.poc.kafka.avro.model.Student.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.poc.kafka.avro.model.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rollNumber)) {
        this.rollNumber = data().deepCopy(fields()[1].schema(), other.rollNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.firstName)) {
        this.firstName = data().deepCopy(fields()[2].schema(), other.firstName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.className)) {
        this.className = data().deepCopy(fields()[4].schema(), other.className);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.contact)) {
        this.contact = data().deepCopy(fields()[5].schema(), other.contact);
        fieldSetFlags()[5] = true;
      }
      if (other.hasContactBuilder()) {
        this.contactBuilder = org.poc.kafka.avro.model.Contact.newBuilder(other.getContactBuilder());
      }
      if (isValidValue(fields()[6], other.scores)) {
        this.scores = data().deepCopy(fields()[6].schema(), other.scores);
        fieldSetFlags()[6] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Student instance
     * @param other The existing instance to copy.
     */
    private Builder(org.poc.kafka.avro.model.Student other) {
            super(org.poc.kafka.avro.model.Student.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rollNumber)) {
        this.rollNumber = data().deepCopy(fields()[1].schema(), other.rollNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.firstName)) {
        this.firstName = data().deepCopy(fields()[2].schema(), other.firstName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.className)) {
        this.className = data().deepCopy(fields()[4].schema(), other.className);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.contact)) {
        this.contact = data().deepCopy(fields()[5].schema(), other.contact);
        fieldSetFlags()[5] = true;
      }
      this.contactBuilder = null;
      if (isValidValue(fields()[6], other.scores)) {
        this.scores = data().deepCopy(fields()[6].schema(), other.scores);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rollNumber' field.
      * @return The value.
      */
    public java.lang.Integer getRollNumber() {
      return rollNumber;
    }

    /**
      * Sets the value of the 'rollNumber' field.
      * @param value The value of 'rollNumber'.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder setRollNumber(int value) {
      validate(fields()[1], value);
      this.rollNumber = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'rollNumber' field has been set.
      * @return True if the 'rollNumber' field has been set, false otherwise.
      */
    public boolean hasRollNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'rollNumber' field.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder clearRollNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }

    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.firstName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }

    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.lastName = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'className' field.
      * @return The value.
      */
    public java.lang.CharSequence getClassName() {
      return className;
    }

    /**
      * Sets the value of the 'className' field.
      * @param value The value of 'className'.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder setClassName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.className = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'className' field has been set.
      * @return True if the 'className' field has been set, false otherwise.
      */
    public boolean hasClassName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'className' field.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder clearClassName() {
      className = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'contact' field.
      * @return The value.
      */
    public org.poc.kafka.avro.model.Contact getContact() {
      return contact;
    }

    /**
      * Sets the value of the 'contact' field.
      * @param value The value of 'contact'.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder setContact(org.poc.kafka.avro.model.Contact value) {
      validate(fields()[5], value);
      this.contactBuilder = null;
      this.contact = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'contact' field has been set.
      * @return True if the 'contact' field has been set, false otherwise.
      */
    public boolean hasContact() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'contact' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.poc.kafka.avro.model.Contact.Builder getContactBuilder() {
      if (contactBuilder == null) {
        if (hasContact()) {
          setContactBuilder(org.poc.kafka.avro.model.Contact.newBuilder(contact));
        } else {
          setContactBuilder(org.poc.kafka.avro.model.Contact.newBuilder());
        }
      }
      return contactBuilder;
    }

    /**
     * Sets the Builder instance for the 'contact' field
     * @return This builder.
     */
    public org.poc.kafka.avro.model.Student.Builder setContactBuilder(org.poc.kafka.avro.model.Contact.Builder value) {
      clearContact();
      contactBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'contact' field has an active Builder instance
     * @return True if the 'contact' field has an active Builder instance
     */
    public boolean hasContactBuilder() {
      return contactBuilder != null;
    }

    /**
      * Clears the value of the 'contact' field.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder clearContact() {
      contact = null;
      contactBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'scores' field.
      * @return The value.
      */
    public java.util.List<org.poc.kafka.avro.model.Score> getScores() {
      return scores;
    }

    /**
      * Sets the value of the 'scores' field.
      * @param value The value of 'scores'.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder setScores(java.util.List<org.poc.kafka.avro.model.Score> value) {
      validate(fields()[6], value);
      this.scores = value;
      fieldSetFlags()[6] = true;
      return this; 
    }

    /**
      * Checks whether the 'scores' field has been set.
      * @return True if the 'scores' field has been set, false otherwise.
      */
    public boolean hasScores() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'scores' field.
      * @return This builder.
      */
    public org.poc.kafka.avro.model.Student.Builder clearScores() {
      scores = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Student build() {
      try {
        Student record = new Student();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.rollNumber = fieldSetFlags()[1] ? this.rollNumber : (java.lang.Integer) defaultValue(fields()[1]);
        record.firstName = fieldSetFlags()[2] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lastName = fieldSetFlags()[3] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.className = fieldSetFlags()[4] ? this.className : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (contactBuilder != null) {
          record.contact = this.contactBuilder.build();
        } else {
          record.contact = fieldSetFlags()[5] ? this.contact : (org.poc.kafka.avro.model.Contact) defaultValue(fields()[5]);
        }
        record.scores = fieldSetFlags()[6] ? this.scores : (java.util.List<org.poc.kafka.avro.model.Score>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
